name: Build Project

on:
  workflow_call:
    inputs:
      release:
        type: boolean
        default: false
        required: false

jobs:
  rust-build:
    strategy:
      matrix:
        platform: ['linux', 'windows', 'darwin']
        arch: ['x86_64', 'aarch64']
        include:
          - platform: linux
            os: ubuntu-20.04
            vendor: unknown
            env: -gnu
            lib: libnative.so
          - platform: windows
            os: windows-2019
            vendor: pc
            env: '-msvc'
            lib: native.dll
          - platform: darwin
            os: macos-11
            vendor: apple
            lib: libnative.dylib
        exclude:
          - platform: linux
            arch: aarch64

    runs-on: ${{ matrix.os }}

    env:
      TARGET_TRIPLET: ${{ matrix.arch }}-${{ matrix.vendor }}-${{ matrix.platform }}${{ matrix.env }}
      CARGO_BUILD: cargo build --target

    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Set up clang64
      if: contains(matrix.os, 'windows')
      run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
    - name: Add Build target
      run: rustup target add ${{ env.TARGET_TRIPLET }}
    - uses: Swatinem/rust-cache@v2
      with:
        workspaces: ./native/
        key: ${{ matrix.arch }}
    - name: Build Debug
      if: ${{ !inputs.release }}
      run: |
        cd native/
        ${{ env.CARGO_BUILD}} ${{ env.TARGET_TRIPLET}}
    - name: Build Release
      if: inputs.release
      run: |
        cd native/
        ${{ env.CARGO_BUILD}} ${{ env.TARGET_TRIPLET}} --release
    - name: Artifacts
      uses: actions/upload-artifact@v3
      with:
          name: libnative-${{ matrix.platform }}-${{ matrix.arch }}
          path: native/target/${{ env.TARGET_TRIPLET }}/${{ inputs.release && 'release' || 'debug' }}/${{ matrix.lib }}

  godot-export:
    strategy:
      matrix:
        profile: ['macOS', 'Windows', 'Linux']
        version: ['4.1.1']
        include:
          - profile: 'macOS'
            platform: darwin
            vendor: apple
            os: macos-12
            x86_64: true
            aarch64: true
            extension: '.dmg'
            lib: libnative.dylib
            template_dir: '$HOME/Library/Application\ Support/Godot/export_templates'
          - profile: 'Windows'
            platform: windows
            env: '-msvc'
            vendor: pc
            os: ubuntu-20.04
            x86_64: true
            aarch64: true
            extension: '.exe'
            lib: native.dll
            template_dir: '$HOME/.local/share/godot/export_templates'
          - profile: 'Linux'
            platform: 'linux'
            env: '-gnu'
            vendor: 'unknown'
            os: ubuntu-20.04
            lib: libnative.so
            template_dir: '$HOME/.local/share/godot/export_templates'
            x86_64: true

    needs: rust-build
    runs-on: ${{ matrix.os }}

    env:
      EXPORT_ARGS: ${{ matrix.profile }} build/${{ matrix.profile }}/SimChopper${{ matrix.extension }}

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup Godot
        uses: lihop/setup-godot@4aad9daa7dd81c11329c4b54fdc26dbd39eea7d6
        with:
          version: ${{ matrix.version }}-stable
          export-templates: false
      - name: download Godot export template
        run: |
          mkdir -p ${{ matrix.template_dir }}/${{ matrix.version }}.stable
          cd ${{ matrix.template_dir }}/${{ matrix.version }}.stable
          curl -LO https://github.com/godotengine/godot/releases/download/${{ matrix.version }}-stable/Godot_v${{ matrix.version }}-stable_export_templates.tpz
          unzip -j Godot_v${{ matrix.version }}-stable_export_templates.tpz
      - name: download x86_64 libs
        if: matrix.x86_64
        uses: actions/download-artifact@v3
        with:
          name: libnative-${{ matrix.platform }}-x86_64
          path: native/target/x86_64-${{ matrix.vendor }}-${{ matrix.platform }}${{ matrix.env }}/release/
      - name: download aarch64 libs
        if: matrix.aarch64
        uses: actions/download-artifact@v3
        with:
          name: libnative-${{ matrix.platform }}-aarch64
          path: native/target/aarch64-${{ matrix.vendor }}-${{ matrix.platform }}${{ matrix.env }}/release/
      - name: create universal libnative
        if: matrix.platform == 'darwin'
        run: |
          platform_dir="${{ matrix.vendor }}-${{ matrix.platform }}"
          mkdir -p native/target/universal-$platform_dir/release/
          lipo -create native/target/x86_64-$platform_dir/release/${{ matrix.lib }} native/target/aarch64-$platform_dir/release/${{ matrix.lib }} -output native/target/universal-$platform_dir/release/${{ matrix.lib }}
      - name: import godot project
        run: .github/build_godot_cache.sh
      - name: export-debug
        if: ${{ !inputs.release }}
        run: |
          mkdir -p "build/${{ matrix.profile}}"
          godot --headless --export-debug ${{ env.EXPORT_ARGS }}
      - name: export-release
        if: inputs.release
        run: |
          mkdir -p "build/${{ matrix.profile}}"
          godot --headless --export-release ${{ env.EXPORT_ARGS }}
      - name: describe revision
        id: describe
        run: echo "::set-output name=ref::$(git describe --tags --always)"
      - uses: actions/upload-artifact@v2
        with:
          name: SimChopper_${{ matrix.profile }}_${{ steps.describe.outputs.ref }}
          path: build/${{ matrix.profile }}
