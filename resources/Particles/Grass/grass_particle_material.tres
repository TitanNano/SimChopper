[gd_resource type="ShaderMaterial" load_steps=4 format=3 uid="uid://cnqnblu4bimql"]

[sub_resource type="Shader" id="Shader_cw7v4"]
code = "shader_type particles;
render_mode keep_data;

uniform uint size = 1;
uniform uint res = 100;
uniform sampler2D normal_map: hint_normal;

void start() {
	vec2 coords = vec2(
		float(INDEX % res),
		floor(float(INDEX) / float(res)) 
	); 
	
	TRANSFORM = EMISSION_TRANSFORM;
	TRANSFORM[3].xz -= float(size) / 2.0;
	TRANSFORM[3].x += coords.x * (float(size) / float(res));
	TRANSFORM[3].z += coords.y * (float(size) / float(res));
	
	vec4 normal = texture(normal_map, coords.xy / vec2(float(res)));
	
	TRANSFORM[3].x += normal.x * 2.0 - 1.0;
	TRANSFORM[3].z += normal.y * 2.0 - 1.0;
}

void process() {
	if (!COLLIDED) {
		TRANSFORM[3].y -= 0.1;
	}
	
	CUSTOM = vec4(ATTRACTOR_FORCE, 0.0);
}

"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_1ke6u"]
frequency = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_nts14"]
as_normal_map = true
noise = SubResource("FastNoiseLite_1ke6u")

[resource]
shader = SubResource("Shader_cw7v4")
shader_parameter/size = 10
shader_parameter/res = 200
shader_parameter/normal_map = SubResource("NoiseTexture2D_nts14")
